After creating the Entity class with their respective data repositories we will be doing some
configuration related to user authentication.
Configurations - we have made a SecurityConfig class under the package config.
In that, we have the configure method which we have overridden from the base class which takes
HttpSecurity as an argument. Here, we are configuring Spring to allow all the requests which
match the endpoint “/api/auth/**” , as these endpoints are used for authentication and registration
we don’t expect the user to be authenticated at that point of time.
PasswordEncoder
Now before storing the user in the database, we ideally want to encode the passwords.
one of the best hashing algorithms for passwords is the Bcrypt Algorithm.
We are using the BCryptPasswordEncoder class provided by Spring Security.

Inside the AuthService class, we are mapping the RegisterRequest object to the User object
 and when setting the password, we are calling the encodePassword() method.
 This method is using the BCryptPasswordEncoder to encode our password.
 After that, we save the user into the database. Note that we are setting the enabled flag as false, as we want to disable the user after registration,
and we only enable the user after verifying the user’s email address.

Now as we can now save the user in the database for authentication but the user should only be given access to the
application if his/her email is verified and hence for this we will first generate the verification token for this just
after saving the user and then we will send this verification token to the email of that particular user and for the email
storage part we would be using a fake SMTP messenger called MAILTRAP.

we will be using thymyleaf dependency to create html templates and use those templates to send
the emails.

Host:smtp.mailtrap.io
Port:25 or 465 or 587 or 2525
Username:<your-username>
Password:<your-password>
Auth:PLAIN, LOGIN and CRAM-MD5
TLS:Optional (STARTTLS on all ports)

Now as we have figure out the authentication we will now configure the authorisation through  JWT.
At first we send our JWT response to the client which will then save it in his http request header
and then Once done we will then authorise other the next request by validating that token return by the user client.

We just needs to add one filter for it and handle all the authorisation inside it and then set it in the
SecurityCongiurer with addFilterBefore() method.

Now for the "Subreddit" endpoints we will be using the builder pattern as the subreddit api wants only some of the
fields to be sent i.e Data transfer object. Hence we will make a DTO of the Subreddit class.

Now to make the "Posts" api endpoints we need to do it the same way, but here we will be using a new library called
mapstruct. This library will avoid us to do make a builder and using its feature we can efficiently and neatly will
make the builder only by using small piece of code.
So Mapstruct is a code generation library that helps us improve our code by automatically generating the Java Bean Mappings.
As you can observe we have to manually build the mapping methods, now imagine if our Subreddit is a big entity with
more than 5-6 fields. Then it would be difficult and complex to write mapping logic between Subreddit and SubredditDto manually.
By using Mapstruct, we can automatically generate the mapping code at compile time.
For installation and its usage check - https://programmingtechie.com/2019/12/14/build-a-full-stack-reddit-clone-with-spring-boot-and-angular-part-5/